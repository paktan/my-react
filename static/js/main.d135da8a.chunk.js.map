{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","baseOn","_ref2","_ref3","src","_ref4","prototypes","PropTypes","string","isRequired","array","prototype","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callMovies","sent","console","log","setState","stop","fetch","then","patato","json","data","catch","err","_renderMovie","movie","src_Movie","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+QCKxC,SAASC,EAATC,GAAkD,IAAlCC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,OAAQC,EAAmBH,EAAnBG,OAAQC,EAAWJ,EAAXI,SACnC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,KAEtCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVL,EAAOQ,IAAI,SAACC,EAAOC,GAAR,OAAkBR,EAAAC,EAAAC,cAACO,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAEjER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACTH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACAW,KAAMb,EACNc,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,OAAO,eAQ3B,SAASZ,EAATa,EAAAC,GAAsC,IAAhBrB,EAAgBoB,EAAhBpB,OAAUQ,EAAMa,EAANb,IAC5B,OAAQL,EAAAC,EAAAC,cAAA,OAAKiB,IAAKtB,EAAQQ,IAAKA,EAAKT,MAAOS,EAAKF,UAAU,kBAG9D,SAASM,EAATW,GAA6B,IAARb,EAAQa,EAARb,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBI,EAAhC,KAIRb,EAAM2B,WAAa,CACfzB,MAAO0B,IAAUC,OAAOC,WACxB3B,OAAQyB,IAAUC,OAAOC,WACzB1B,OAAQwB,IAAUG,MAAMD,WACxBzB,SAAUuB,IAAUC,OAAOC,YAG/BpB,EAAYiB,WAAa,CACrBxB,OAAQyB,IAAUC,OAAOC,WACzBnB,IAAKiB,IAAUC,OAAOC,YAG1Bf,EAAWiB,UAAY,CACnBnB,MAAOe,IAAUC,OAAOC,YAGb9B,QCLAiC,6MA5CbC,MAAQ,KAORC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA/B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,cADf,OACLP,EADKG,EAAAK,KAEXC,QAAQC,IAAIV,GACZM,EAAKK,SAAS,CACZX,WAJS,wBAAAG,EAAAS,SAAAb,QAQbQ,YAAc,WACZ,OAAOM,MAAM,yDACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKjB,SACvBkB,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,QAG5BC,aAAe,WASb,OARed,EAAKT,MAAMG,OAAOzB,IAAI,SAAA8C,GACnC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,CAAOzD,MAAOwD,EAAMxD,MAC3BC,OAAQuD,EAAME,mBACdxD,OAAQsD,EAAMtD,OACdC,SAAUqD,EAAMrD,SAChBW,IAAK0C,EAAMG,2FAxBbC,KAAK3B,8CA8BC,IACCE,EAAUyB,KAAK5B,MAAfG,OACP,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAW4B,EAAS,MAAQ,eAC9BA,EAASyB,KAAKL,eAAiB,kBAvCtBM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.d135da8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from  'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\nfunction Movie({title, poster, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Columns\">\n                <MoviePoster poster={poster} alt={title} />     \n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <p className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis=' ...'\n                    trimRight\n                    baseOn='letters'\n                    />\n                </p>\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({poster}, {alt}) {\n    return (<img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />)\n}\n\nfunction MovieGenre({genre}) {\n    return (\n        <span className=\"Movie__Genre\">{genre} </span>\n    )\n}\n\nMovie.prototypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.prototypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.prototype = {\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie","import React, {Component} from  'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\n\nclass App extends Component {\n  state = {\n  }\n\n  componentDidMount(){\n    this._getMovies()\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callMovies()\n    console.log(movies)\n    this.setState({\n      movies\n    })\n  }\n\n  _callMovies = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=rating')\n    .then(patato => patato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _renderMovie = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie title={movie.title} \n      poster={movie.medium_cover_image} \n      genres={movie.genres}\n      synopsis={movie.synopsis}\n      key={movie.id}/>\n    })\n\n    return movies\n  }\n\n  render(){\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovie() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}